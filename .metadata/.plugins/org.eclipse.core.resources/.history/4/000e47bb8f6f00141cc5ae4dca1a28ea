package com.db.database;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import com.db.guest.Guest;
import com.db.guest.Ride;
import com.db.tools.DateTime;
import com.db.tools.DateTimeCalendar;
import com.db.tools.Info;
import com.db.tools.Randomizer;

public class Database {

	// Database connection
	private Connection connection;

	// Used for executing MySQL queries
	private Statement statement;

	private DatabaseMetaData meta;

	private DateTimeCalendar calendar;

	public Database(boolean reset, DateTimeCalendar calendar) throws SQLException, IOException, ClassNotFoundException{

		this.calendar = calendar;
		startDatabase();

		/* If reset flag is true, re-make the names tables */
		if(reset){
			Info.maleListAmount = addNamesToDatabase("males.txt", "male_names");
			Info.femaleListAmount = addNamesToDatabase("females.txt", "female_names");
		}else{
			Info.maleListAmount = 1200;
			Info.femaleListAmount = 1200;
		}
	}

	public void addRideToDatabase(Ride ride){
		try {
			/* Add a ride with determined name */
			statement.executeUpdate("insert into rides (id, name, build_date, excitement, price) values (NULL, '" + 
					ride.getName() + "', '1991-2-2', 12, " + ride.getPrice() + ");");
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void addInfoToDatabase(String text){
		try {
			statement.executeUpdate("insert into info (id, text, date) values (NULL, '" + text + "', '1991-2-2');");
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void clearTables(){
		try {
			statement.executeUpdate("truncate guests;");
			statement.executeUpdate("truncate rides;");
			statement.executeUpdate("truncate info;");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public Guest generateRandomGuest(){

		// Select either a male or female
		boolean isMale = Randomizer.randomBoolean();

		String tableName = "";
		int maxAmount = 0;

		/* Choose which maximum number to access (Male or female) */
		if(isMale){
			tableName = "male_names";
			maxAmount = Info.maleListAmount;
		}else{
			tableName = "female_names";
			maxAmount = Info.femaleListAmount;
		}

		// Get random id to retrieve name from database
		int id = Randomizer.randomInt(1, maxAmount);

		String name = "";

		try {
			/* Get a random name from database and add to result set*/
			statement.executeQuery("SELECT * FROM " + tableName + " WHERE id = " + id);
			ResultSet result = statement.getResultSet();

			/* Get the name from result set */
			if(result.next()){
				name = result.getString("name") + " " + Randomizer.randomCharacter();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		/* Generate money and arrival date */
		float money = Randomizer.randomFloat(30, 500, 2);
		DateTime arrivalDate = calendar.getDateAndTime();

		/* Create the guest, and add alert and guest to database */
		Guest guest = new Guest(0, name, 'M', arrivalDate, 5, money);
		addInfoToDatabase(guest.getName() + " has entered the park.");
		try {
			String s = String.format("insert into guests (id, name, sex, arrival_date) values (NULL, '%s', '%c', '%s');", guest.getName(), guest.getSex(), guest.getArrivalDate());
			statement.executeUpdate(s);
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return guest;
	}

	private void startDatabase() throws ClassNotFoundException, SQLException{
		Class.forName("com.mysql.jdbc.Driver");

		/* Start the connection */
		connection = DriverManager.getConnection(
				"jdbc:mysql://sql4.freesqldatabase.com/sql458061", "sql458061", "sE3%aR5*");

		// Create a statement
		statement = connection.createStatement();

		// Create meta data
		meta = connection.getMetaData();
	}

	public void removeIDFromTable(int id, String tableName){
		try {
			statement.executeUpdate("delete from " + tableName + " where id = " + id);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public JTable getTableFromDatabase(String tableName){

		JTable table = null;

		try {

			statement = connection.createStatement();
			
			/* Select everything from the table and get the number of columns */
			ResultSet result = statement.executeQuery("SELECT * FROM " + tableName);
			ResultSetMetaData md = result.getMetaData();
			int numCols = md.getColumnCount();

			// Column names
			String[] headers = new String[numCols];

			/* Get column names from meta data */
			for(int i = 0; i < numCols; i++){
				headers[i] = md.getColumnName(i + 1);
			}

			// Create the default table model
			DefaultTableModel dtm = new DefaultTableModel(0, 0);

			/* Add columns to model and create the table */
			dtm.setColumnIdentifiers(headers);
			table = new JTable(dtm);

			/* Add all rows to the table */
			while(result.next()){
				Object[] r = new Object[numCols];
				for(int j = 0; j < r.length; j++){
					r[j] = result.getString(j + 1);
				}
				dtm.addRow(r);
			}

		} catch (SQLException e) {
			System.out.println("Could not load data");
		}

		return table;
	}

	private int addNamesToDatabase(String fileName, String tableName)
			throws SQLException, IOException{

		System.out.println("Adding names to database-------------------");

		// Used throughout function for results
		ResultSet result;

		result = meta.getTables(null, null, tableName, null);

		/* See if table already exists */
		if(result.next()){
			System.out.println("Table already exists. Removing "+ tableName + "...");
			statement.executeUpdate("DROP TABLE " + tableName + ";");
		}

		/* Create the table */
		System.out.println("Creating table " + tableName + "...");
		statement.executeUpdate("create table " + tableName + 
				" (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT, name VARCHAR(20));");

		/* Define file line and buffer to read in file */
		String line;
		BufferedReader br = new BufferedReader(new FileReader(fileName));

		int count = 0;

		/* Read in and parse names; store into database */
		while ((line = br.readLine()) != null) {
			count++;
			line = line.replaceAll("\\d+.*", "").replace(" ", "");
			System.out.println("Count = " + count);
			statement.execute("INSERT INTO " + tableName + 
					" (id, name) VALUES (NULL, '" + line + "');");
		} br.close();

		// Get the id of the last row
		statement.executeQuery("SELECT MAX(id) FROM " + tableName + ";");

		result = statement.getResultSet();
		int listAmount = 0;

		/* Find the id of the last row and store the value into list amount */
		while(result.next()){
			listAmount = result.getInt("MAX(id)");
			System.out.println(listAmount + " entries.");
		}

		System.out.println("Done creating table " + tableName + ".\n");

		return listAmount;
	}
}
